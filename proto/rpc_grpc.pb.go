// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FSCacheClient is the client API for FSCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FSCacheClient interface {
	GetFiles(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (FSCache_GetFilesClient, error)
}

type fSCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewFSCacheClient(cc grpc.ClientConnInterface) FSCacheClient {
	return &fSCacheClient{cc}
}

func (c *fSCacheClient) GetFiles(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (FSCache_GetFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FSCache_ServiceDesc.Streams[0], "/FSCache/GetFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSCacheGetFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FSCache_GetFilesClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type fSCacheGetFilesClient struct {
	grpc.ClientStream
}

func (x *fSCacheGetFilesClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FSCacheServer is the server API for FSCache service.
// All implementations must embed UnimplementedFSCacheServer
// for forward compatibility
type FSCacheServer interface {
	GetFiles(*ListRequest, FSCache_GetFilesServer) error
	mustEmbedUnimplementedFSCacheServer()
}

// UnimplementedFSCacheServer must be embedded to have forward compatible implementations.
type UnimplementedFSCacheServer struct {
}

func (UnimplementedFSCacheServer) GetFiles(*ListRequest, FSCache_GetFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedFSCacheServer) mustEmbedUnimplementedFSCacheServer() {}

// UnsafeFSCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FSCacheServer will
// result in compilation errors.
type UnsafeFSCacheServer interface {
	mustEmbedUnimplementedFSCacheServer()
}

func RegisterFSCacheServer(s grpc.ServiceRegistrar, srv FSCacheServer) {
	s.RegisterService(&FSCache_ServiceDesc, srv)
}

func _FSCache_GetFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FSCacheServer).GetFiles(m, &fSCacheGetFilesServer{stream})
}

type FSCache_GetFilesServer interface {
	Send(*File) error
	grpc.ServerStream
}

type fSCacheGetFilesServer struct {
	grpc.ServerStream
}

func (x *fSCacheGetFilesServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

// FSCache_ServiceDesc is the grpc.ServiceDesc for FSCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FSCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FSCache",
	HandlerType: (*FSCacheServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFiles",
			Handler:       _FSCache_GetFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rpc.proto",
}
